generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                String   @id @default(uuid())
  email             String   @unique
  name              String
  password          String
  role              String   @default("ADMIN")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  geofences         GeoFenceArea[]

  // Subscription fields (optional now)
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?

  subscriptionStart  DateTime? 
  subscriptionEnd    DateTime?
  isActive           Boolean          @default(false)
}

model SubscriptionPlan {
  id           String   @id @default(uuid())
  name         String   @unique
  price        Float
  currency     String   @default("INR")
  durationDays Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  admins       Admin[]
}


model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  password      String
  currentStatus Boolean        @default(false)
  totalInOut    Int            @default(0)
  lastAreaId    String?
  createdAt     DateTime       @default(now())
  role          String         @default("USER")
  locationLogs  Location[]
  UserGeofence  UserGeofence[]

  Fingerprint Fingerprint[]

  GeofenceFraud GeofenceFraud[]
}

model Location {
  id                  String    @id @default(uuid())
  userId              String
  areaId              String?
  areaName            String?
  inTime              DateTime?
  inLongitude         Float?    @default(0.0)
  inLatitude          Float?    @default(0.0)
  outTime             DateTime?
  outLongitude        Float?    @default(0.0)
  outLatitude         Float?    @default(0.0)
  totalTime           Int?
  currentStatus       Boolean   @default(true)
  isDisconnected      Boolean   @default(false)
  locationSharingTime DateTime  @default(now())
  isSwitched          Boolean   @default(false)
  user                User      @relation(fields: [userId], references: [id])
}

model GeoFenceArea {
  id               String         @id @default(uuid())
  name             String
  longitude        Float
  latitude         Float
  type             String
  description      String?
  coordinates      String?
  radius           Float?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isActive         Boolean        @default(true)
  createdBy        String
  totalActiveUsers Int            @default(0)
  admin            Admin          @relation(fields: [createdBy], references: [id])
  UserGeofence     UserGeofence[]
}

model JwtToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique
  type      String
  issuedAt  DateTime  @default(now())
  expiresAt DateTime
  revoked   Boolean   @default(false)
  revokedAt DateTime?
  reason    String?
  createdAt DateTime  @default(now())

  @@index([userId])
  @@index([expiresAt])
}

model UserGeofence {
  id           String       @id @default(uuid())
  userId       String
  geofenceId   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  geoFenceArea GeoFenceArea @relation(fields: [geofenceId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([userId, geofenceId])
}
model Message {
  id           String   @id @default(uuid())
  senderId     String
  receiverId   String
  senderRole   String   // "USER" or "ADMIN"
  receiverRole String   // "USER" or "ADMIN"
  content      String
  read         Boolean  @default(false)
  createdAt    DateTime @default(now())
}
model Fingerprint {
  id           String   @id @default(uuid())
  visitorId    String   @unique
  userId       String?  // remove @db.Uuid
  createdAt    DateTime @default(now())
  lastSeenAt   DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
}
model GeofenceFraud {
  id               String   @id @default(uuid())
  userId           String
  fenceId          String
  oldFingerprintId String
  newFingerprintId String
  detectedAt       DateTime @default(now())

  user             User     @relation(fields: [userId], references: [id])
}
